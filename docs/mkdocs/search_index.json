{
    "docs": [
        {
            "location": "/", 
            "text": "InEngine.NET - Command Processing Server.\n\n\nInEngine.NET allows commands to be queued, scheduled, and run directly. \n\n\nHow to Get Started\n\n\nGet started by reading up on \ncommands\n.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#inenginenet-command-processing-server", 
            "text": "InEngine.NET allows commands to be queued, scheduled, and run directly.", 
            "title": "InEngine.NET - Command Processing Server."
        }, 
        {
            "location": "/#how-to-get-started", 
            "text": "Get started by reading up on  commands .", 
            "title": "How to Get Started"
        }, 
        {
            "location": "/commands/", 
            "text": "Commands\n\n\nCommands are the fundamental abstraction used to run custom logic.\n\n\nCreate a Command\n\n\nThe InEngine.Core package is required. Install it into your own Visual Studio project.\n\n\nPackage Manager\n\n\nInstall-Package InEngine.Core\n\n\n\n\nNuget CLI\n\n\nnuget install InEgine.Core\n\n\n\n\n.NET CLI\n\n\ndotnet add package InEngine.Core\n\n\n\n\nPaket CLI\n\n\npaket add InEngine.Core\n\n\n\n\nAdding a class that implements \nInEngine.Core.ICommand\n is the simplest way to create a command.\n\n\nusing System;\nusing InEngine.Core;\n\nnamespace MyCommandPlugin\n{\n    public class MyCommand : ICommand\n    {\n        public CommandResult Run()\n        {\n            Console.WriteLine(\nHello, world!\n);\n            return new CommandResult(true);\n        }\n    }\n}\n\n\n\n\nExtending the \nInEngine.Core.AbstractCommand\n class adds extra functionality, like a logger, a progress bar, and the ability to schedule the command using the scheduler.\nMinimally, the Run method should be overridden.\n\n\nusing System;\nusing InEngine.Core;\n\nnamespace MyCommandPlugin\n{\n    public class MyCommand : ICommand\n    {\n        public override CommandResult Run()\n        {\n            Console.WriteLine(\nHello, world!\n);\n            return new CommandResult(true);\n        }\n    }\n}\n\n\n\n\nRun a Command\n\n\nCreate a class that implements \nInEngine.Core.IOptions\n in the same assembly as the command class.\nAdd a VerbOptions attribute from the CommandLine namespace that defines the name of the command and optional help text.\nThe help text can be auto-generated from the attribute or manually specified in the GetUsage method.  \n\n\nusing CommandLine;\nusing CommandLine.Text;\nusing InEngine.Core;\n\nnamespace MyCommandPlugin\n{\n    public class MyOptions : IOptions\n    {\n        [VerbOption(\nmy-command\n, HelpText=\nMy example command.\n)]\n        public MyCommand MyCommand { get; set; }\n\n        [HelpVerbOption]\n        public string GetUsage(string verb)\n        {\n            return HelpText.AutoBuild(this, verb);\n        }\n    }\n}\n\n\n\n\nDownload the InEngineCli tool that matches the version of the InEngine.Core package you included from the \nGitHub Releases\n page.\n\n\nCopy your project's DLLs into the same directory as InEngineCli.exe.\n\n\nRun your command...\n\n\nInEngineCli.exe -pMyCommandPlugin my-command\n\n\n\n\nDiscover Commands Plugins\n\n\nRun InEngineCli.exe without any arguments to see a list of arguments.\n\n\nAvailable plugins... \nInEngine.Commands\nInEngine.Core\n\n\n\n\nDiscover Commands in a Plugin\n\n\nRun InEngineCli.exe with only the plugin specified.\n\n\nInEngineCli.exe -pInEngine.Core\n\n\n\n\nThe \nInEngine.Core\n library is itself a plugin that contains queue related commands. \nThis is the help output for the core plugin.\n\n\nInEngine 3.1.0\nCopyright \u00a9 Ethan Hann 2017\n\n  queue:publish    Publish a command message to a queue.\n\n  queue:consume    Consume one or more command messages from the queue.\n\n  queue:length     Get the number of messages in the primary and secondary \n                   queues.\n\n  queue:clear      Clear the primary and secondary queues.\n\n\n\n\nPrint Help Text for a Plugin's Commands\n\n\nRun the command with the -h or --help arguments.\n\n\nInEngineCli.exe -pInEngine.Core queue:clear -h\n\n\n\n\nThe \nInEngine.Core\n plugin's command to clear the InEngine.NET's queues produces this help message. \n\n\nInEngine 3.1.0\nCopyright \u00a9 Ethan Hann 2017\n\n  --processing-queue    Clear the processing queue.\n\n  --secondary           Clear the secondary queue.", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#commands", 
            "text": "Commands are the fundamental abstraction used to run custom logic.", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#create-a-command", 
            "text": "The InEngine.Core package is required. Install it into your own Visual Studio project.  Package Manager  Install-Package InEngine.Core  Nuget CLI  nuget install InEgine.Core  .NET CLI  dotnet add package InEngine.Core  Paket CLI  paket add InEngine.Core  Adding a class that implements  InEngine.Core.ICommand  is the simplest way to create a command.  using System;\nusing InEngine.Core;\n\nnamespace MyCommandPlugin\n{\n    public class MyCommand : ICommand\n    {\n        public CommandResult Run()\n        {\n            Console.WriteLine( Hello, world! );\n            return new CommandResult(true);\n        }\n    }\n}  Extending the  InEngine.Core.AbstractCommand  class adds extra functionality, like a logger, a progress bar, and the ability to schedule the command using the scheduler.\nMinimally, the Run method should be overridden.  using System;\nusing InEngine.Core;\n\nnamespace MyCommandPlugin\n{\n    public class MyCommand : ICommand\n    {\n        public override CommandResult Run()\n        {\n            Console.WriteLine( Hello, world! );\n            return new CommandResult(true);\n        }\n    }\n}", 
            "title": "Create a Command"
        }, 
        {
            "location": "/commands/#run-a-command", 
            "text": "Create a class that implements  InEngine.Core.IOptions  in the same assembly as the command class.\nAdd a VerbOptions attribute from the CommandLine namespace that defines the name of the command and optional help text.\nThe help text can be auto-generated from the attribute or manually specified in the GetUsage method.    using CommandLine;\nusing CommandLine.Text;\nusing InEngine.Core;\n\nnamespace MyCommandPlugin\n{\n    public class MyOptions : IOptions\n    {\n        [VerbOption( my-command , HelpText= My example command. )]\n        public MyCommand MyCommand { get; set; }\n\n        [HelpVerbOption]\n        public string GetUsage(string verb)\n        {\n            return HelpText.AutoBuild(this, verb);\n        }\n    }\n}  Download the InEngineCli tool that matches the version of the InEngine.Core package you included from the  GitHub Releases  page.  Copy your project's DLLs into the same directory as InEngineCli.exe.  Run your command...  InEngineCli.exe -pMyCommandPlugin my-command", 
            "title": "Run a Command"
        }, 
        {
            "location": "/commands/#discover-commands-plugins", 
            "text": "Run InEngineCli.exe without any arguments to see a list of arguments.  Available plugins... \nInEngine.Commands\nInEngine.Core", 
            "title": "Discover Commands Plugins"
        }, 
        {
            "location": "/commands/#discover-commands-in-a-plugin", 
            "text": "Run InEngineCli.exe with only the plugin specified.  InEngineCli.exe -pInEngine.Core  The  InEngine.Core  library is itself a plugin that contains queue related commands. \nThis is the help output for the core plugin.  InEngine 3.1.0\nCopyright \u00a9 Ethan Hann 2017\n\n  queue:publish    Publish a command message to a queue.\n\n  queue:consume    Consume one or more command messages from the queue.\n\n  queue:length     Get the number of messages in the primary and secondary \n                   queues.\n\n  queue:clear      Clear the primary and secondary queues.", 
            "title": "Discover Commands in a Plugin"
        }, 
        {
            "location": "/commands/#print-help-text-for-a-plugins-commands", 
            "text": "Run the command with the -h or --help arguments.  InEngineCli.exe -pInEngine.Core queue:clear -h  The  InEngine.Core  plugin's command to clear the InEngine.NET's queues produces this help message.   InEngine 3.1.0\nCopyright \u00a9 Ethan Hann 2017\n\n  --processing-queue    Clear the processing queue.\n\n  --secondary           Clear the secondary queue.", 
            "title": "Print Help Text for a Plugin's Commands"
        }
    ]
}