{
    "docs": [
        {
            "location": "/", 
            "text": "What is this?\n\n\nInEngine.NET is a background commands processing server. \nIt allows commands to be queued, scheduled, and ran directly. \n\n\nHow to Get Started\n\n\nCreate a Command\n\n\nFirst, install the InEngine.Core package into your own Visual Studio project.\n\n\nPackage Manager\n\n\nInstall-Package InEngine.Core\n\n\n\n\nNuget CLI\n\n\nnuget install InEgine.Core\n\n\n\n\n.NET CLI\n\n\ndotnet add package InEngine.Core\n\n\n\n\nPaket CLI\n\n\npaket add InEngine.Core\n\n\n\n\nAdd a class that implements \nInEngine.Core.ICommand\n or extends \nInEngine.Core.AbstractCommand\n. \nThe \nAbstractCommand\n class adds extra functionality, like a logger, a progress bar, and the ability to schedule the command using the scheduler.\nMinimally, the Run method should be overridden.\n\n\nusing System;\nusing InEngine.Core;\n\nnamespace MyCommands\n{\n    public class MyCommand : ICommand\n    {\n        public CommandResult Run()\n        {\n            Console.WriteLine(\nHello, world!\n);\n            return new CommandResult(true);\n        }\n    }\n}\n\n\n\n\nCreate a class that implements \nInEngine.Core.IOptions\n in the same assembly as the command class.\nAdd VerbOptions from the CommandLine namespace.\nThe help text can be auto-generated or manually specified.  \n\n\nusing CommandLine;\nusing CommandLine.Text;\nusing InEngine.Core;\n\nnamespace InEngine.Commands\n{\n    public class MyOptions : IOptions\n    {\n        [VerbOption(\nmy-command\n, HelpText=\nMy example command.\n)]\n        public MyCommand MyCommand { get; set; }\n\n        [HelpVerbOption]\n        public string GetUsage(string verb)\n        {\n            return HelpText.AutoBuild(this, verb);\n        }\n    }\n}\n\n\n\n\nRun the Command\n\n\nSecond, download the InEngineCli tool that matches the version of the InEngine.Core package you included from the \nGitHub Releases\n page.\n\n\nCopy your project's DLLs into the same directory as InEngineCli.exe.\n\n\nRun your command...\n\n\nInEngineCli.exe -pMyCommands my-command", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#what-is-this", 
            "text": "InEngine.NET is a background commands processing server. \nIt allows commands to be queued, scheduled, and ran directly.", 
            "title": "What is this?"
        }, 
        {
            "location": "/#how-to-get-started", 
            "text": "", 
            "title": "How to Get Started"
        }, 
        {
            "location": "/#create-a-command", 
            "text": "First, install the InEngine.Core package into your own Visual Studio project.  Package Manager  Install-Package InEngine.Core  Nuget CLI  nuget install InEgine.Core  .NET CLI  dotnet add package InEngine.Core  Paket CLI  paket add InEngine.Core  Add a class that implements  InEngine.Core.ICommand  or extends  InEngine.Core.AbstractCommand . \nThe  AbstractCommand  class adds extra functionality, like a logger, a progress bar, and the ability to schedule the command using the scheduler.\nMinimally, the Run method should be overridden.  using System;\nusing InEngine.Core;\n\nnamespace MyCommands\n{\n    public class MyCommand : ICommand\n    {\n        public CommandResult Run()\n        {\n            Console.WriteLine( Hello, world! );\n            return new CommandResult(true);\n        }\n    }\n}  Create a class that implements  InEngine.Core.IOptions  in the same assembly as the command class.\nAdd VerbOptions from the CommandLine namespace.\nThe help text can be auto-generated or manually specified.    using CommandLine;\nusing CommandLine.Text;\nusing InEngine.Core;\n\nnamespace InEngine.Commands\n{\n    public class MyOptions : IOptions\n    {\n        [VerbOption( my-command , HelpText= My example command. )]\n        public MyCommand MyCommand { get; set; }\n\n        [HelpVerbOption]\n        public string GetUsage(string verb)\n        {\n            return HelpText.AutoBuild(this, verb);\n        }\n    }\n}", 
            "title": "Create a Command"
        }, 
        {
            "location": "/#run-the-command", 
            "text": "Second, download the InEngineCli tool that matches the version of the InEngine.Core package you included from the  GitHub Releases  page.  Copy your project's DLLs into the same directory as InEngineCli.exe.  Run your command...  InEngineCli.exe -pMyCommands my-command", 
            "title": "Run the Command"
        }
    ]
}